//kage:unit pixels

/*
    Glitch Effect Shader by Yui Kinomoto @arlez80
    https://godotshaders.com/shader/glitch-effect-shader/

    MIT License
*/

package main

func random(seed float) float {
    return fract(543.2543 * sin(dot(vec2(seed, seed), vec2(3525.46, -54.3415))))
}

var Time float

func Fragment(destPosition vec4, srcPosition vec2, color vec4) vec4 {
    // shake_power and shake_color_rate have been multiplied by 100
    // to compensate somewhat for srcPosition not being normalized
    shake_power := 3.0
    shake_rate := 0.2
    shake_speed := 5.0
    shake_block_size := 30.5
    shake_color_rate := 1.0

    current := imageSrc0At(srcPosition)

    if imageSrc1At(srcPosition).a == 0 {
        return current
    }

    if random(Time * shake_speed) < shake_rate {
        return current
    }

    fixed_uv := srcPosition
    fixed_uv.x += (random((floor(srcPosition.y * shake_block_size ) / shake_block_size) + Time) - 0.5) * shake_power;

    pixel_color := imageSrc0At(fixed_uv)
    pixel_color.r = mix(pixel_color.r, imageSrc0At(fixed_uv + vec2(shake_color_rate, 0.0)).r, 1.0);
    pixel_color.b = mix(pixel_color.b, imageSrc0At(fixed_uv + vec2(-shake_color_rate, 0.0)).b, 1.0);

    return pixel_color;
}
